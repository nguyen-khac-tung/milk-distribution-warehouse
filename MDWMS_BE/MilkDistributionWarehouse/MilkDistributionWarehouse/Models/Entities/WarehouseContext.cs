// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MilkDistributionWarehouse.Models.Entities;

public partial class WarehouseContext : DbContext
{
    public WarehouseContext(DbContextOptions<WarehouseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Area> Areas { get; set; }

    public virtual DbSet<BackOrder> BackOrders { get; set; }

    public virtual DbSet<Batch> Batchs { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Good> Goods { get; set; }

    public virtual DbSet<GoodsIssueNote> GoodsIssueNotes { get; set; }

    public virtual DbSet<GoodsIssueNoteDetail> GoodsIssueNoteDetails { get; set; }

    public virtual DbSet<GoodsReceiptNote> GoodsReceiptNotes { get; set; }

    public virtual DbSet<GoodsReceiptNoteDetail> GoodsReceiptNoteDetails { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<LogHistory> LogHistories { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Pallet> Pallets { get; set; }

    public virtual DbSet<PurchaseOderDetail> PurchaseOderDetails { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<RefreshToken> RefreshTokens { get; set; }

    public virtual DbSet<Retailer> Retailers { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<SalesOrder> SalesOrders { get; set; }

    public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }

    public virtual DbSet<StocktakingArea> StocktakingAreas { get; set; }

    public virtual DbSet<StocktakingLocation> StocktakingLocations { get; set; }

    public virtual DbSet<StocktakingPallet> StocktakingPallets { get; set; }

    public virtual DbSet<StocktakingSheet> StocktakingSheets { get; set; }

    public virtual DbSet<StorageCondition> StorageConditions { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<UnitMeasure> UnitMeasures { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserOtp> UserOtps { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Area>(entity =>
        {
            entity.Property(e => e.AreaCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaName).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(255);

            entity.HasOne(d => d.StorageCondition).WithMany(p => p.Areas)
                .HasForeignKey(d => d.StorageConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Areas_StorageConditions");
        });

        modelBuilder.Entity<BackOrder>(entity =>
        {
            entity.Property(e => e.BackOrderId).ValueGeneratedNever();

            entity.HasOne(d => d.Goods).WithMany(p => p.BackOrders)
                .HasForeignKey(d => d.GoodsId)
                .HasConstraintName("FK_BackOrders_Goods");

            entity.HasOne(d => d.Retailer).WithMany(p => p.BackOrders)
                .HasForeignKey(d => d.RetailerId)
                .HasConstraintName("FK_BackOrders_Retailers");
        });

        modelBuilder.Entity<Batch>(entity =>
        {
            entity.Property(e => e.BatchId).ValueGeneratedNever();
            entity.Property(e => e.BatchCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CreateByNavigation).WithMany(p => p.Batches)
                .HasForeignKey(d => d.CreateBy)
                .HasConstraintName("FK_Batchs_Users");

            entity.HasOne(d => d.Goods).WithMany(p => p.Batches)
                .HasForeignKey(d => d.GoodsId)
                .HasConstraintName("FK_Batchs_Products");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.CategoryName).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(255);
        });

        modelBuilder.Entity<Good>(entity =>
        {
            entity.HasKey(e => e.GoodsId).HasName("PK_Products");

            entity.Property(e => e.GoodsCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.GoodsName).HasMaxLength(255);

            entity.HasOne(d => d.Category).WithMany(p => p.Goods)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Categories");

            entity.HasOne(d => d.StorageCondition).WithMany(p => p.Goods)
                .HasForeignKey(d => d.StorageConditionId)
                .HasConstraintName("FK_Products_StorageConditions");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Goods)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_Products_Suppliers");

            entity.HasOne(d => d.UnitMeasure).WithMany(p => p.Goods)
                .HasForeignKey(d => d.UnitMeasureId)
                .HasConstraintName("FK_Products_UnitMeasures");
        });

        modelBuilder.Entity<GoodsIssueNote>(entity =>
        {
            entity.Property(e => e.GoodsIssueNoteId).ValueGeneratedNever();

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GoodsIssueNotes)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_GoodsIssueNotes_Users");

            entity.HasOne(d => d.SalesOder).WithMany(p => p.GoodsIssueNotes)
                .HasForeignKey(d => d.SalesOderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GoodsIssueNotes_SalesOrders");
        });

        modelBuilder.Entity<GoodsIssueNoteDetail>(entity =>
        {
            entity.Property(e => e.GoodsIssueNoteDetailId).ValueGeneratedNever();

            entity.HasOne(d => d.Goods).WithMany(p => p.GoodsIssueNoteDetails)
                .HasForeignKey(d => d.GoodsId)
                .HasConstraintName("FK_GoodsIssueNoteDetails_Goods");

            entity.HasOne(d => d.GoodsIssueNote).WithMany(p => p.GoodsIssueNoteDetails)
                .HasForeignKey(d => d.GoodsIssueNoteId)
                .HasConstraintName("FK_GoodsIssueNoteDetails_GoodsIssueNotes");
        });

        modelBuilder.Entity<GoodsReceiptNote>(entity =>
        {
            entity.HasKey(e => e.GoodsReceiptNoteId).HasName("PK_ImportInspections_1");

            entity.Property(e => e.GoodsReceiptNoteId).ValueGeneratedNever();

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GoodsReceiptNotes)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_GoodsReceiptNotes_Users");

            entity.HasOne(d => d.PurchaseOder).WithMany(p => p.GoodsReceiptNotes)
                .HasForeignKey(d => d.PurchaseOderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImportInspections_ImportOrders");
        });

        modelBuilder.Entity<GoodsReceiptNoteDetail>(entity =>
        {
            entity.HasKey(e => e.GoodsReceiptNoteDetailId).HasName("PK_ImportInspections");

            entity.Property(e => e.GoodsReceiptNoteDetailId).ValueGeneratedNever();
            entity.Property(e => e.Note).HasMaxLength(255);

            entity.HasOne(d => d.Goods).WithMany(p => p.GoodsReceiptNoteDetails)
                .HasForeignKey(d => d.GoodsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImportInspections_Products");

            entity.HasOne(d => d.GoodsReceiptNote).WithMany(p => p.GoodsReceiptNoteDetails)
                .HasForeignKey(d => d.GoodsReceiptNoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImportInspectionDetails_ImportInspections");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.Property(e => e.LocationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Rack)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Area).WithMany(p => p.Locations)
                .HasForeignKey(d => d.AreaId)
                .HasConstraintName("FK_Locations_Areas");
        });

        modelBuilder.Entity<LogHistory>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("LogHistory");

            entity.Property(e => e.Content).HasMaxLength(500);
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.Property(e => e.NotificationId).ValueGeneratedNever();
            entity.Property(e => e.Content).HasMaxLength(500);
            entity.Property(e => e.Title).HasMaxLength(255);

            entity.HasOne(d => d.ReceivedByNavigation).WithMany(p => p.NotificationReceivedByNavigations)
                .HasForeignKey(d => d.ReceivedBy)
                .HasConstraintName("FK_Notifications_Users");

            entity.HasOne(d => d.SendByNavigation).WithMany(p => p.NotificationSendByNavigations)
                .HasForeignKey(d => d.SendBy)
                .HasConstraintName("FK_Notifications_Users1");
        });

        modelBuilder.Entity<Pallet>(entity =>
        {
            entity.Property(e => e.PalletId).ValueGeneratedNever();

            entity.HasOne(d => d.Batch).WithMany(p => p.Pallets)
                .HasForeignKey(d => d.BatchId)
                .HasConstraintName("FK_Pallets_Batchs");

            entity.HasOne(d => d.CreateByNavigation).WithMany(p => p.Pallets)
                .HasForeignKey(d => d.CreateBy)
                .HasConstraintName("FK_Pallets_Users");

            entity.HasOne(d => d.Location).WithMany(p => p.Pallets)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_Pallets_Locations");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.Pallets)
                .HasForeignKey(d => d.PurchaseOrderId)
                .HasConstraintName("FK_Pallets_ImportOrders");
        });

        modelBuilder.Entity<PurchaseOderDetail>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderDetailId).HasName("PK_ImportOderDetails");

            entity.HasOne(d => d.Goods).WithMany(p => p.PurchaseOderDetails)
                .HasForeignKey(d => d.GoodsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImportOderDetails_Products");

            entity.HasOne(d => d.PurchaseOder).WithMany(p => p.PurchaseOderDetails)
                .HasForeignKey(d => d.PurchaseOderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImportOderDetails_ImportOrders");
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOderId).HasName("PK_ImportOrders");

            entity.Property(e => e.PurchaseOderId).ValueGeneratedNever();

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_PurchaseOrders_Users");

            entity.HasOne(d => d.Supplier).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_ImportOrders_Suppliers");
        });

        modelBuilder.Entity<RefreshToken>(entity =>
        {
            entity.ToTable("RefreshToken");

            entity.HasIndex(e => e.UserId, "IX_RefreshToken").IsUnique();

            entity.Property(e => e.Token)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.User).WithOne(p => p.RefreshToken)
                .HasForeignKey<RefreshToken>(d => d.UserId)
                .HasConstraintName("FK_RefreshToken_Users");
        });

        modelBuilder.Entity<Retailer>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.RetailerName).HasMaxLength(255);
            entity.Property(e => e.TaxCode)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.RoleName).HasMaxLength(100);
        });

        modelBuilder.Entity<SalesOrder>(entity =>
        {
            entity.HasKey(e => e.SalesOrderId).HasName("PK_ExportOrders");

            entity.Property(e => e.SalesOrderId).ValueGeneratedNever();

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SalesOrders)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_SalesOrders_Users");

            entity.HasOne(d => d.Retailer).WithMany(p => p.SalesOrders)
                .HasForeignKey(d => d.RetailerId)
                .HasConstraintName("FK_ExportOrders_Retailers");
        });

        modelBuilder.Entity<SalesOrderDetail>(entity =>
        {
            entity.HasKey(e => e.SalesOrderDetailId).HasName("PK_ExportOrderDetails");

            entity.Property(e => e.SalesOrderDetailId).ValueGeneratedNever();

            entity.HasOne(d => d.Goods).WithMany(p => p.SalesOrderDetails)
                .HasForeignKey(d => d.GoodsId)
                .HasConstraintName("FK_ExportOrderDetails_Products");

            entity.HasOne(d => d.SalesOrder).WithMany(p => p.SalesOrderDetails)
                .HasForeignKey(d => d.SalesOrderId)
                .HasConstraintName("FK_ExportOrderDetails_ExportOrders");
        });

        modelBuilder.Entity<StocktakingArea>(entity =>
        {
            entity.Property(e => e.StocktakingAreaId).ValueGeneratedNever();

            entity.HasOne(d => d.Area).WithMany(p => p.StocktakingAreas)
                .HasForeignKey(d => d.AreaId)
                .HasConstraintName("FK_StocktakingAreas_Areas");

            entity.HasOne(d => d.AssignToNavigation).WithMany(p => p.StocktakingAreas)
                .HasForeignKey(d => d.AssignTo)
                .HasConstraintName("FK_StocktakingAreas_Users");

            entity.HasOne(d => d.StocktakingSheet).WithMany(p => p.StocktakingAreas)
                .HasForeignKey(d => d.StocktakingSheetId)
                .HasConstraintName("FK_StocktakingAreas_StocktakingSheets");
        });

        modelBuilder.Entity<StocktakingLocation>(entity =>
        {
            entity.HasKey(e => e.StocktakingLocationId).HasName("PK_StocktakingOrderDetails");

            entity.ToTable("StocktakingLocation");

            entity.Property(e => e.StocktakingLocationId).ValueGeneratedNever();
            entity.Property(e => e.Note).HasMaxLength(255);

            entity.HasOne(d => d.Location).WithMany(p => p.StocktakingLocations)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_StocktakingLocation_Locations");

            entity.HasOne(d => d.StocktakingArea).WithMany(p => p.StocktakingLocations)
                .HasForeignKey(d => d.StocktakingAreaId)
                .HasConstraintName("FK_StocktakingLocation_StocktakingAreas");
        });

        modelBuilder.Entity<StocktakingPallet>(entity =>
        {
            entity.HasKey(e => e.StocktakingPalletId).HasName("PK_CheckLists");

            entity.ToTable("StocktakingPallet");

            entity.Property(e => e.StocktakingPalletId).ValueGeneratedNever();
            entity.Property(e => e.Note).HasMaxLength(200);

            entity.HasOne(d => d.Pallet).WithMany(p => p.StocktakingPallets)
                .HasForeignKey(d => d.PalletId)
                .HasConstraintName("FK_StocktakingPallet_Pallets");

            entity.HasOne(d => d.StocktakingLocation).WithMany(p => p.StocktakingPallets)
                .HasForeignKey(d => d.StocktakingLocationId)
                .HasConstraintName("FK_StocktakingPallet_StocktakingLocation");
        });

        modelBuilder.Entity<StocktakingSheet>(entity =>
        {
            entity.HasKey(e => e.StocktakingSheetId).HasName("PK_StocktakingOrders");

            entity.Property(e => e.StocktakingSheetId).ValueGeneratedNever();
            entity.Property(e => e.Note).HasMaxLength(255);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.StocktakingSheets)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_StocktakingSheets_Users");
        });

        modelBuilder.Entity<StorageCondition>(entity =>
        {
            entity.Property(e => e.HumidityMax).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.HumidityMin).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.LightLevel).HasMaxLength(100);
            entity.Property(e => e.TemperatureMax).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TemperatureMin).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.BrandName).HasMaxLength(150);
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TaxCode)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UnitMeasure>(entity =>
        {
            entity.HasKey(e => e.UnitMeasureId).HasName("PK_UnitOfMeasures");

            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(50);
            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Password)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.EmailNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.Email)
                .HasConstraintName("FK_Users_UserOtp");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRole",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserRole_Role"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserRole_Users"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("UserRole");
                    });
        });

        modelBuilder.Entity<UserOtp>(entity =>
        {
            entity.HasKey(e => e.Email);

            entity.ToTable("UserOtp");

            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.OtpCode)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}